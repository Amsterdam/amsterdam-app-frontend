# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

puts "ARTIFACT_FOLDER: #{ENV["ARTIFACT_FOLDER"]}"
puts "VERSION_NUMBER: #{ENV["VERSION_NUMBER"]}"

# we only set this in the release pipelines, this is a default to prevent errors during the build task
ipa_path = ""

if ENV["ARTIFACT_FOLDER"]
  ipa_path = ENV["ARTIFACT_FOLDER"]
end

apps = [
  {
    :name => "amsterdam-test",
    :app_identifier => "nl.amsterdam.app.dev",
    :scheme => "AmsterdamApp Test",
    :distribute_to_stakeholders => false,
    :distribute_to_production => false,
    :output_name => "AmsterdamTest.ipa",
  },
  {
    :name => "amsterdam",
    :app_identifier => "nl.amsterdam.app",
    :scheme => "AmsterdamApp", 
    :distribute_to_stakeholders => true,
    :distribute_to_production => true,
    :output_name => "Amsterdam.ipa",
  },
]

def parseVersionNumber(fullVersionNumber)
  if fullVersionNumber
    return fullVersionNumber.match /(?<version>\d+\.\d+\.\d+)\.(?<build>\d+)/
  else
    UI.user_error!("ERROR: parseVersionNumber failed")
  end
end

platform :ios do

  desc "Build prod and dev version of the app"

  lane :buildApps do

    # we use private lanes to switch app identifier, which we can only set for a lane (see Appfile)
    desc "Create single app build"
    private_lane :buildLane do |app|
      get_provisioning_profile( # Create or get provisioning profile
          output_path: "./builds",  # Download provisioning profile in the build folder
          app_identifier: app[:app_identifier],
        )
        build_app(
          workspace: "AmsterdamApp.xcworkspace",
          scheme: app[:scheme],
          clean: true,
          build_path: "./builds",
          output_directory: "./builds",
          output_name: app[:output_name],
        )
    end

    desc "Production build"
    private_lane :prodLane do |app|
      buildLane(app)
    end

    desc "Dev build"
    private_lane :devLane do |app|
      buildLane(app)
    end

    cocoapods(
      clean_install: true,
      podfile: "./Podfile",
    )

    app_store_connect_api_key(
      key_id: "4B3KZ8N747",
      key_filepath: './certs/App_Store_Connect_API_Key_4B3KZ8N747.p8',
      issuer_id: "69a6de97-c5e4-47e3-e053-5b8c7c11a4d1",
      duration: 600,
    )

    get_certificates( # Create or get certificate, and install it
      keychain_path: "/Users/runner/work/_temp/ios_signing_temp.keychain",
      output_path: "./builds", # Download certificate in the build folder (you don't need to create the folder)
    )

    apps.each do |app|
      puts "Build #{app[:app_identifier]}"
      if app[:name] == "amsterdam-test"
        devLane(app)
      else
        prodLane(app)
      end
    end

    # set_changelog()
  end

  lane :distributeInternal do

    app_store_connect_api_key(
      key_id: "4B3KZ8N747",
      key_filepath: './certs/App_Store_Connect_API_Key_4B3KZ8N747.p8',
      issuer_id: "69a6de97-c5e4-47e3-e053-5b8c7c11a4d1",
      duration: 600,
    )

    apps.each do |app|
      full_ipa_path =  "#{ipa_path}/#{app[:output_name]}"
      puts "Upload to testflight for #{full_ipa_path}"
      if File.exists?(full_ipa_path)
        upload_to_testflight(
          ipa: full_ipa_path,
          groups: 'AmsterdamApp-scrumteam',
          app_version: parseVersionNumber(ENV["VERSION_NUMBER"])[:version],
          build_number: parseVersionNumber(ENV["VERSION_NUMBER"])[:build],
          app_identifier: app[:app_identifier],
        )
      else
        UI.user_error!("ERROR: #{ipa_path} does not exist")
      end
    end

  end

  lane :distributeStakeholders do

    app_store_connect_api_key(
      key_id: "4B3KZ8N747",
      key_filepath: './certs/App_Store_Connect_API_Key_4B3KZ8N747.p8',
      issuer_id: "69a6de97-c5e4-47e3-e053-5b8c7c11a4d1",
      duration: 600,
    )

    apps.each do |app|
      if app[:distribute_to_stakeholders]
        full_ipa_path =  "#{ipa_path}/#{app[:output_name]}"
        puts "Upload to testflight for #{full_ipa_path}"
        if File.exists?(full_ipa_path)
          upload_to_testflight(
            ipa: full_ipa_path,
            distribute_only: true,
            groups: 'AmsterdamApp-stakeholders',
            app_identifier: app[:app_identifier],
          )
        else
          UI.user_error!("ERROR: #{ipa_path} does not exist")
        end
      end
    end

  end
  
  lane :distributeProduction do

    app_store_connect_api_key(
      key_id: "4B3KZ8N747",
      key_filepath: './certs/App_Store_Connect_API_Key_4B3KZ8N747.p8',
      issuer_id: "69a6de97-c5e4-47e3-e053-5b8c7c11a4d1",
      duration: 600,
    )

    apps.each do |app|
      if app[:distribute_to_production]
        full_ipa_path =  "#{ipa_path}/#{app[:output_name]}"
        puts "Release to App Store: #{full_ipa_path}"
        if File.exists?(full_ipa_path)
          upload_to_app_store(
            submit_for_review: false,
            automatic_release: false,
            ipa: full_ipa_path,
            app_identifier: app[:app_identifier],
          )
        else
          UI.user_error!("ERROR: #{ipa_path} does not exist")
        end
      end
    end
    
  end

end

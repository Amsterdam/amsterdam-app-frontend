# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

apk_path = "#{File.expand_path(File.dirname(__FILE__))}/../app/build/outputs/apk/release/app-release.apk"
aab_path = "#{File.expand_path(File.dirname(__FILE__))}/../app/release/app-release.aab"

def parseVersionNumber(fullVersionNumber)
  return fullVersionNumber.match /(?<version>\d+\.\d+\.\d+)\.(?<build>\d+)/
end

platform :android do

  desc "Submit a new Beta Build"
  lane :beta do
    keystore_path = "#{File.expand_path(File.dirname(__FILE__))}/../certs/upload.keystore"
    keystore_password = ENV["KEYSTORE_PASSWORD"] # store.password and key.password are sharing the same password
    keystore_alias = "key0"

    if File.exists?(keystore_path)
      system("keytool -list -v -keystore #{keystore_path} -storepass #{keystore_password}") # this is the upload certificate which should be used to sign the apk

      gradle(
        task: 'clean assembleRelease',
        print_command: false,
        properties: {
          "android.injected.signing.store.file" => keystore_path,
          "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],     
          "android.injected.signing.key.alias" => "key0",
          "android.injected.signing.key.password" => ENV["KEYSTORE_PASSWORD"]
      })

      system("keytool -list -printcert -jarfile #{apk_path}") # this is the debug certificate which was used to sign the apk

    else
      UI.user_error!("ERROR: #{keystore_path} does not exist")
    end

  end

  lane :distributeInternalAab do
    if File.exists?(apk_path)
      upload_to_play_store(
      package_name: 'com.stadsapp',
      track: 'internal',
      aab: aab_path
    )
    else
      UI.user_error!("ERROR: #{apk_path} does not exist")
    end
  end

  lane :distributeInternal do
    if File.exists?(apk_path)
      upload_to_play_store(
      package_name: 'com.stadsapp',
      track: 'internal',
      apk: apk_path
    )
    else
      UI.user_error!("ERROR: #{apk_path} does not exist")
    end
  end

  lane :distributeStakeHolders do
    upload_to_play_store(
      package_name: "com.stadsapp",
      track: "internal",
      track_promote_to: "alpha",
      validate_only: false,
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      version_code: parseVersionNumber(ENV["VERSION_NUMBER"])[:build],
    )
  end
end

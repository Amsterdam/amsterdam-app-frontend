default_platform(:ios)

puts "ARTIFACT_FOLDER: #{ENV["ARTIFACT_FOLDER"]}"
puts "VERSION_NUMBER: #{ENV["VERSION_NUMBER"]}"

# The path to the .ipa files (artifact staging directory)
# we only set this in the release pipelines, this is a default to prevent errors during the build pipeline
ipa_path = ""
if ENV["ARTIFACT_FOLDER"]
  ipa_path = ENV["ARTIFACT_FOLDER"]
end

# TF_BUILD will be true when this is run in a DevOps pipeline
if ENV["TF_BUILD"]
  xcode_select("/Applications/Xcode_15.4.app")
  setup_ci()
end

# The URL to the repo for Match
git_url = "git@ssh.dev.azure.com:v3/CloudCompetenceCenter/Amsterdam-App/aapp_app_ios-certificates"
if ENV["MATCH_GIT_BEARER_AUTHORIZATION"] || ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
  git_url = "https://CloudCompetenceCenter@dev.azure.com/CloudCompetenceCenter/Amsterdam-App/_git/aapp_app_ios-certificates"
end

# Config for the test and production app
apps = [
  {
    :name => "amsterdam-test",
    :app_identifier => "nl.amsterdam.app.dev",
    :scheme => "AmsterdamApp Test",
    :distribute_to_stakeholders => false,
    :distribute_to_production => false,
    :output_name => "AmsterdamTest.ipa",
  },
  {
    :name => "amsterdam",
    :app_identifier => "nl.amsterdam.app",
    :scheme => "AmsterdamApp",
    :distribute_to_stakeholders => true,
    :distribute_to_production => true,
    :output_name => "Amsterdam.ipa",
  },
]

def parseVersionNumber(fullVersionNumber)
  if fullVersionNumber
    return fullVersionNumber.match /(?<version>\d+\.\d+\.\d+)\.(?<build>\d+)/
  else
    UI.user_error!("ERROR: parseVersionNumber failed")
  end
end

def getReleaseInfoForVersion(isInternal = false)
  require 'uri'
  require 'net/http'
  require 'json'
  baseUri = isInternal ? 'https://acc.app.amsterdam.nl/modules/api/v1/release/' : 'https://app.amsterdam.nl/modules/api/v1/release/'
  uri = URI(baseUri + parseVersionNumber(ENV["VERSION_NUMBER"])[:version])
  res = Net::HTTP.get_response(uri)
  if res.is_a?(Net::HTTPSuccess)
    json = JSON.parse(res.body)
    puts "Release notes: " + json['releaseNotes']
    return json
  end
end

def isDateInFuture(date)
  date = Date.parse(date)
  return date > Date.today
end

def calculateAutoReleaseDateTimeInMilliseconds(date)
  date = Date.parse(date)
  dateTime = DateTime.new(date.year, date.month, date.day, 0, 0, 0)
  return dateTime.strftime('%s%L')
end

platform :ios do

  private_lane :installAppStoreApiKey do
    app_store_connect_api_key(
        key_id: "4B3KZ8N747",
        issuer_id: "69a6de97-c5e4-47e3-e053-5b8c7c11a4d1",
        key_filepath: './certs/App_Store_Connect_API_Key_4B3KZ8N747.p8',
        duration: 1200,
        in_house: false,
      )
  end

  # options
  #   readonly: boolean (default = false)
  #   type: 'development' | 'appstore' (default = 'development')
  private_lane :syncCertificates do |options|
    
    readonly = options.fetch(:readonly, false)
    type = options.fetch(:type, 'development')

    puts "Sync certificates for #{type}, readonly: #{readonly}"

    if !readonly
      installAppStoreApiKey()
    end

    identifiers = apps.map { |app| app[:app_identifier] }

    match(
      type: type,
      generate_apple_certs: true,
      app_identifier: identifiers,
      git_branch: 'amsterdam-app',
      readonly: readonly,
      skip_certificate_matching: readonly,
      skip_provisioning_profiles: false,
      storage_mode: "git",
      git_url: git_url,
      git_full_name: "Amsterdam App",
      git_user_email: "app@amsterdam.nl",
      force_for_new_devices: true,
      include_mac_in_profiles: true,
      verbose: true,
    )

  end

  desc "Sync development certificates"
  lane :syncDevelopment do |options|
    syncCertificates(options)
  end

  desc "Sync adhoc certificates"
  lane :syncAdhoc do |options|
    syncCertificates(
      **options,
      type: "adhoc",
    )
  end

  desc "Sync appstore certificates"
  lane :syncAppstore do |options|
    syncCertificates(
      **options,
      type: "appstore",
    )
  end

  desc "Sync all certificates"
  lane :syncAll do |options|
    syncDevelopment(options)
    syncAdhoc(options)
    syncAppstore(options)
  end

  desc "Build prod and dev version of the app"
  lane :buildApps do

    # We cannot switch the app identifier for the build_app task via a config setting, in this setup we can only set it for a lane (see Appfile).
    # Hence the multitude of lanes that seemingly do nothing.

    desc "Create single app build"
    private_lane :buildLane do |app|
        build_app(
          workspace: "AmsterdamApp.xcworkspace",
          scheme: app[:scheme],
          clean: true,
          build_path: "./builds",
          output_directory: "./builds",
          output_name: app[:output_name],
        )
    end

    desc "Production build"
    private_lane :prodLane do |app|
      buildLane(app)
    end

    desc "Dev build"
    private_lane :devLane do |app|
      buildLane(app)
    end

    syncAppstore(
      readonly: true,
    )

    cocoapods(
      clean_install: true,
      podfile: "./Podfile",
    )

    apps.each do |app|
      puts "Build #{app[:app_identifier]}"
      if app[:name] == "amsterdam-test"
        devLane(app)
      else
        prodLane(app)
      end
    end
  end

  lane :distributeInternal do

    installAppStoreApiKey()

    releaseNotes = getReleaseInfoForVersion(true)['releaseNotes']
    apps.each do |app|
      full_ipa_path =  "#{ipa_path}/#{app[:output_name]}"
      puts "Upload to testflight for #{full_ipa_path}"
      if File.exists?(full_ipa_path)
        upload_to_testflight(
          ipa: full_ipa_path,
          app_version: parseVersionNumber(ENV["VERSION_NUMBER"])[:version],
          build_number: parseVersionNumber(ENV["VERSION_NUMBER"])[:build],
          app_identifier: app[:app_identifier],
          groups: "AmsterdamApp-internal",
          changelog: releaseNotes,
          localized_build_info: {
            "default": {
              whats_new: releaseNotes,
            },
            "nl-NL": {
              whats_new: releaseNotes,
            }
          }
        )
      else
        FastlaneCore::UI.error("ERROR: #{ipa_path} does not exist")
      end
    end

  end

  lane :distributeStakeholders do

    installAppStoreApiKey()

    releaseNotes = getReleaseInfoForVersion()['releaseNotes']
    apps.each do |app|
      if app[:distribute_to_stakeholders]
        full_ipa_path =  "#{ipa_path}/#{app[:output_name]}"
        puts "Upload to testflight for #{full_ipa_path}"
        if File.exists?(full_ipa_path)
          upload_to_testflight(
            app_identifier: app[:app_identifier],
            app_version: parseVersionNumber(ENV["VERSION_NUMBER"])[:version],
            build_number: parseVersionNumber(ENV["VERSION_NUMBER"])[:build],
            ipa: full_ipa_path,
            distribute_external: true,
            distribute_only: true,
            groups: "AmsterdamApp-stakeholders",
            changelog: releaseNotes,
            localized_build_info: {
              "default": {
                whats_new: releaseNotes,
              },
              "nl-NL": {
                whats_new: releaseNotes,
              }
            }
          )
        else
          FastlaneCore::UI.error("ERROR: #{ipa_path} does not exist")
        end
      end
    end

  end
  
  lane :distributeProduction do

    installAppStoreApiKey()

    releaseInfo = getReleaseInfoForVersion()
    releaseNotes = releaseInfo['releaseNotes']
    releaseDate = releaseInfo['published']
    
    automaticReleaseProperties = {
      automatic_release: true,
    }
    if (!releaseDate)
      puts 'No release date specified, automatic release after store approval.'
    elsif (isDateInFuture(releaseDate))
      puts 'Release date: ' + releaseDate
      releaseDateMilliseconds = calculateAutoReleaseDateTimeInMilliseconds(releaseDate)
      puts 'Release date in miliseconds: ' + releaseDateMilliseconds
      automaticReleaseProperties = {
        auto_release_date: releaseDateMilliseconds
      }
    else 
      FastlaneCore::UI.error('ERROR: Release date not in the future! Fix this or users will get update notifications to an yet unreleased version!')
      exit(1)
    end
    apps.each do |app|
      if app[:distribute_to_production]
        full_ipa_path =  "#{ipa_path}/#{app[:output_name]}"
        puts "Release to App Store: #{full_ipa_path}"
        if File.exists?(full_ipa_path)
          upload_to_app_store(
            submit_for_review: true,
            **automaticReleaseProperties,
            ipa: full_ipa_path,
            app_identifier: app[:app_identifier],
            skip_metadata: false,
            skip_screenshots: true,
            force: true,
            precheck_include_in_app_purchases: false,
            edit_live: false,
            use_live_version: false,
            phased_release: false,
            run_precheck_before_submit: true,
            skip_binary_upload: true,
            submission_information: {
              add_id_info_limits_tracking: false,
              add_id_info_serves_ads: false,
              add_id_info_tracks_action: false,
              add_id_info_tracks_install: false,
              add_id_info_uses_idfa: false,
              content_rights_has_rights: true,
              content_rights_contains_third_party_content: false,
              export_compliance_platform: 'ios',
              export_compliance_compliance_required: false,
              export_compliance_encryption_updated: false,
              export_compliance_app_type: nil,
              export_compliance_uses_encryption: false,
              export_compliance_is_exempt: false,
              export_compliance_contains_third_party_cryptography: false,
              export_compliance_contains_proprietary_cryptography: false,
              export_compliance_available_on_french_store: false
            },
            release_notes: {
              'nl-NL': releaseNotes
            }
          )
        else
          FastlaneCore::UI.error("ERROR: #{ipa_path} does not exist")
        end
      end
    end
  end
end

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

puts "ARTIFACT_FOLDER: #{ENV["ARTIFACT_FOLDER"]}"
puts "VERSION_NUMBER: #{ENV["VERSION_NUMBER"]}"

# The path to the folder with the AAB/APK files (artifact staging directory)
# we only set this in the release pipelines, this is a default to prevent errors during the build pipeline
app_build_path = ""

if ENV["ARTIFACT_FOLDER"]
  app_build_path = ENV["ARTIFACT_FOLDER"]
end

apps = [
  {
    :name => "amsterdam-test",
    :task => "bundle",
    :app_identifier => "nl.amsterdam.app.dev",
    :build_type => "Release",
    :flavor => "dev",
    :distribute_to_stakeholders => false,
    :distribute_to_production => false,
    :apk_path => "/apk/dev/release/app-dev-release.apk", 
    :aab_path => "/bundle/devRelease/app-dev-release.aab",
    :env => {
      "API_KEY_DEV" => ENV["FILTER_API_KEY_DEV"],
      "API_KEY_TEST" => ENV["FILTER_API_KEY_TEST"],
      "API_KEY_ACC" => ENV["FILTER_API_KEY_ACC"],
      "API_KEY_PROD" => ENV["FILTER_API_KEY_PROD"],
    },
  },
  {
    :name => "amsterdam",
    :task => "bundle",
    :app_identifier => "nl.amsterdam.app",
    :build_type => "Release",
    :flavor => "prod",
    :distribute_to_stakeholders => true,
    :distribute_to_production => true,
    :apk_path => "/apk/prod/release/app-prod-release.apk", 
    :aab_path => "/bundle/prodRelease/app-prod-release.aab",
    :env => {
      "API_KEY_DEV" => "",
      "API_KEY_TEST" => "",
      "API_KEY_ACC" => "",
      "API_KEY_PROD" => ENV["FILTER_API_KEY_PROD"],
    },
  },
]

def parseVersionNumber(fullVersionNumber)
  if fullVersionNumber
    return fullVersionNumber.match /(?<version>\d+\.\d+\.\d+)\.(?<build>\d+)/
  else
    UI.user_error!("ERROR: parseVersionNumber failed")
  end
end

def getReleaseInfoForVersion(isInternal = false)
  require 'uri'
  require 'net/http'
  require 'json'
  baseUri = isInternal ? 'https://acc.app.amsterdam.nl/modules/api/v1/release/' : 'https://app.amsterdam.nl/modules/api/v1/release/'
  uri = URI(baseUri + parseVersionNumber(ENV["VERSION_NUMBER"])[:version])
  res = Net::HTTP.get_response(uri)
  if res.is_a?(Net::HTTPSuccess)
    json = JSON.parse(res.body)
    puts "Release notes: " + json['releaseNotes']
    return json
  end
end

def writeReleaseNotes(releaseNotes)
  directory = "./metadata/android/nl-NL/changelogs/"
  if (!Dir.exists?(directory))
    require 'fileutils'
    FileUtils.mkdir_p(directory)
  end
  filePath = directory + parseVersionNumber(ENV["VERSION_NUMBER"])[:build] + '.txt'
  File.write(filePath, releaseNotes)
end

platform :android do

  lane :setEnvironmentForApp do |app|
    app[:env].each do |key, value|
      ENV[key] = value
    end
  end

  desc "Build dev and prod version of the app"
  lane :buildApps do
    keystore_path = "#{File.expand_path(File.dirname(__FILE__))}/../certs/upload.keystore"
    keystore_password = ENV["KEYSTORE_PASSWORD"] # store.password and key.password are sharing the same password
    keystore_alias = "key0"

    if File.exists?(keystore_path)
      # this will create a file on the path set in the AppFile (json_key_file)
      system("keytool -list -v -keystore #{keystore_path} -storepass #{keystore_password}") # this is the upload certificate which should be used to sign the apk/aab

      apps.each do |app|
        setEnvironmentForApp(app)
        gradle(
          task: app[:task],
          build_type: app[:build_type],
          flavor: app[:flavor],
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => keystore_path,
            "android.injected.signing.store.password" => keystore_password,     
            "android.injected.signing.key.alias" => keystore_alias,
            "android.injected.signing.key.password" => keystore_password
        })
      end

    else
      UI.user_error!("ERROR: #{keystore_path} does not exist")
    end

  end

  lane :distributeInternal do
    releaseNotes = getReleaseInfoForVersion(true)['releaseNotes']
    writeReleaseNotes(releaseNotes)
    apps.each do |app|
      isAab = app[:task] == "bundle"
      full_apk_path = "#{app_build_path}#{app[:apk_path]}"
      full_aab_path = "#{app_build_path}#{app[:aab_path]}"
      final_path = isAab ? full_aab_path : full_apk_path
      puts "Upload to Play Store for #{final_path}"
      if File.exists?(final_path)
        upload_to_play_store(
          package_name: app[:app_identifier],
          track: 'internal',
          aab: isAab ? full_aab_path : nil,
          apk: !isAab ? full_apk_path : nil,
          version_code: parseVersionNumber(ENV["VERSION_NUMBER"])[:build].to_i,
        )
      else
        UI.user_error!("ERROR: #{final_path} does not exist")
      end
    end
  end

  lane :distributeStakeholders do
    releaseNotes = getReleaseInfoForVersion()['releaseNotes']
    writeReleaseNotes(releaseNotes)
    apps.each do |app|
      if app[:distribute_to_stakeholders]
        isAab = app[:task] == "bundle"
        full_apk_path = "#{app_build_path}#{app[:apk_path]}"
        full_aab_path = "#{app_build_path}#{app[:aab_path]}"
        final_path = isAab ? full_aab_path : full_apk_path
        puts "Upload to Play Store for #{final_path}"
        if File.exists?(final_path)
          upload_to_play_store(
            package_name: app[:app_identifier],
            track: "internal",
            track_promote_to: "alpha",
            aab: isAab ? full_aab_path : nil,
            apk: !isAab ? full_apk_path : nil,
            validate_only: false,
            skip_upload_apk: true,
            skip_upload_aab: true,
            skip_upload_images: true,
            skip_upload_screenshots: true,
            version_code: parseVersionNumber(ENV["VERSION_NUMBER"])[:build].to_i,
          )
        else
          UI.user_error!("ERROR: #{final_path} does not exist")
        end
      end
    end
  end
  
  lane :distributeProduction do
    releaseNotes = getReleaseInfoForVersion()['releaseNotes']
    writeReleaseNotes(releaseNotes)
    apps.each do |app|
      if app[:distribute_to_production]
        # Note: we only submit AABs for a production release (this is mandatory)
        full_aab_path = "#{app_build_path}#{app[:aab_path]}"
        puts "Upload to Play Store for #{full_aab_path}"
        if File.exists?(full_aab_path)
          upload_to_play_store(
            package_name: app[:app_identifier],
            track: "alpha",
            track_promote_to: "production",
            track_promote_release_status: "completed",
            aab: full_aab_path,
            skip_upload_apk: true,
            skip_upload_aab: true,
            validate_only: false,
            skip_upload_images: true,
            skip_upload_screenshots: true,
            version_code: parseVersionNumber(ENV["VERSION_NUMBER"])[:build].to_i,
          )
        else
          UI.user_error!("ERROR: #{full_aab_path} does not exist")
        end
      end
    end
  end
end
